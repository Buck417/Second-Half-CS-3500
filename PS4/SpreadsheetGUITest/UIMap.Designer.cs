// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// SimpleMathTest - Use 'SimpleMathTestParams' to pass parameters into this method.
        /// </summary>
        public void SimpleMathTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinClient uICellValueClient = this.UIForm1Window.UIItemWindow.UICellValueClient;
            WinButton uISolveButton = this.UIForm1Window.UISolveWindow.UISolveButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(47, 24));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(58, 7));

            // Type '55' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.SimpleMathTestParams.UICellValueTextBoxEditText;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.SimpleMathTestParams.UICellValueTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(166, 37));

            // Type '2' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.SimpleMathTestParams.UICellValueTextBoxEditText1;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.SimpleMathTestParams.UICellValueTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(243, 34));

            // Type '=A1/B2' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.SimpleMathTestParams.UICellValueTextBoxEditText2;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.SimpleMathTestParams.UICellValueTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'Solve' button
            Mouse.Click(uISolveButton, new Point(35, 14));

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(139, 58));

            // Type '=A1*B1' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.SimpleMathTestParams.UICellValueTextBoxEditText3;

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(240, 33));

            // Type '=A1/B1' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.SimpleMathTestParams.UICellValueTextBoxEditText4;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.SimpleMathTestParams.UICellValueTextBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// TestCellDiagnostics - Use 'TestCellDiagnosticsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestCellDiagnostics()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UIForm1Window.UIA1Window.UICellContentsBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'C1'
            Assert.AreEqual(this.TestCellDiagnosticsExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Cell name should be C1");

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals '=A1/B1'
            Assert.AreEqual(this.TestCellDiagnosticsExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Equation should be =A1/B1");
        }
        
        /// <summary>
        /// BasicMathTest - Use 'BasicMathTestParams' to pass parameters into this method.
        /// </summary>
        public void BasicMathTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinClient uICellValueClient = this.UIForm1Window.UIItemWindow.UICellValueClient;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(37, 27));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(30, 5));

            // Type '2' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathTestParams.UICellValueTextBoxEditText;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.BasicMathTestParams.UICellValueTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(158, 71));

            // Type '3' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathTestParams.UICellValueTextBoxEditText1;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.BasicMathTestParams.UICellValueTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(245, 60));

            // Type '=A1*B3' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathTestParams.UICellValueTextBoxEditText2;
        }
        
        /// <summary>
        /// BasicMathAssertions - Use 'BasicMathAssertionsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BasicMathAssertions()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UIForm1Window.UIA1Window.UICellContentsBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'C2'
            Assert.AreEqual(this.BasicMathAssertionsExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text);

            // Verify that the 'SelectionText' property of 'cellValueTextBox' text box equals '=A1*B3'
            Assert.AreEqual(this.BasicMathAssertionsExpectedValues.UICellValueTextBoxEditSelectionText, uICellValueTextBoxEdit.SelectionText);
        }
        
        #region Properties
        public virtual SimpleMathTestParams SimpleMathTestParams
        {
            get
            {
                if ((this.mSimpleMathTestParams == null))
                {
                    this.mSimpleMathTestParams = new SimpleMathTestParams();
                }
                return this.mSimpleMathTestParams;
            }
        }
        
        public virtual TestCellDiagnosticsExpectedValues TestCellDiagnosticsExpectedValues
        {
            get
            {
                if ((this.mTestCellDiagnosticsExpectedValues == null))
                {
                    this.mTestCellDiagnosticsExpectedValues = new TestCellDiagnosticsExpectedValues();
                }
                return this.mTestCellDiagnosticsExpectedValues;
            }
        }
        
        public virtual BasicMathTestParams BasicMathTestParams
        {
            get
            {
                if ((this.mBasicMathTestParams == null))
                {
                    this.mBasicMathTestParams = new BasicMathTestParams();
                }
                return this.mBasicMathTestParams;
            }
        }
        
        public virtual BasicMathAssertionsExpectedValues BasicMathAssertionsExpectedValues
        {
            get
            {
                if ((this.mBasicMathAssertionsExpectedValues == null))
                {
                    this.mBasicMathAssertionsExpectedValues = new BasicMathAssertionsExpectedValues();
                }
                return this.mBasicMathAssertionsExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        #endregion
        
        #region Fields
        private SimpleMathTestParams mSimpleMathTestParams;
        
        private TestCellDiagnosticsExpectedValues mTestCellDiagnosticsExpectedValues;
        
        private BasicMathTestParams mBasicMathTestParams;
        
        private BasicMathAssertionsExpectedValues mBasicMathAssertionsExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIForm1Window mUIForm1Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleMathTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SimpleMathTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '55' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText = "55";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1/B2' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText2 = "=A1/B2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A1*B1' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText3 = "=A1*B1";
        
        /// <summary>
        /// Type '=A1/B1' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText4 = "=A1/B1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestCellDiagnostics'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestCellDiagnosticsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'C1'
        /// </summary>
        public string UICellContentsBoxEditText = "C1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals '=A1/B1'
        /// </summary>
        public string UICellValueTextBoxEditText = "=A1/B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicMathTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BasicMathTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1*B3' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText2 = "=A1*B3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicMathAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BasicMathAssertionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'C2'
        /// </summary>
        public string UICellContentsBoxEditText = "C2";
        
        /// <summary>
        /// Verify that the 'SelectionText' property of 'cellValueTextBox' text box equals '=A1*B3'
        /// </summary>
        public string UICellValueTextBoxEditSelectionText = "=A1*B3";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UICellValueTextBoxWindow UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISolveWindow UISolveWindow
        {
            get
            {
                if ((this.mUISolveWindow == null))
                {
                    this.mUISolveWindow = new UISolveWindow(this);
                }
                return this.mUISolveWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICellValueTextBoxWindow mUICellValueTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISolveWindow mUISolveWindow;
        
        private UIA1Window mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueTextBoxWindow : WinWindow
    {
        
        public UICellValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueTextBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UICellValueClient
        {
            get
            {
                if ((this.mUICellValueClient == null))
                {
                    this.mUICellValueClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICellValueClient.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICellValueClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISolveWindow : WinWindow
    {
        
        public UISolveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "solveButton";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UISolveButton
        {
            get
            {
                if ((this.mUISolveButton == null))
                {
                    this.mUISolveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISolveButton.SearchProperties[WinButton.PropertyNames.Name] = "Solve";
                    this.mUISolveButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISolveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISolveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
}
