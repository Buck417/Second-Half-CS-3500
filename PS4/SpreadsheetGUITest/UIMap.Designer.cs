// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// BasicMathWithError - Use 'BasicMathWithErrorParams' to pass parameters into this method.
        /// </summary>
        public void BasicMathWithError()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinClient uICellValueClient = this.UIForm1Window.UIItemWindow.UICellValueClient;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(46, 24));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(55, 5));

            // Type '2' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathWithErrorParams.UICellValueTextBoxEditText;

            // Type '{Enter}{Down}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.BasicMathWithErrorParams.UICellValueTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(91, 59));

            // Type '3' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathWithErrorParams.UICellValueTextBoxEditText1;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.BasicMathWithErrorParams.UICellValueTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(160, 38));

            // Type '=A1+A2' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathWithErrorParams.UICellValueTextBoxEditText2;

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(160, 61));

            // Type '=B1*3' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathWithErrorParams.UICellValueTextBoxEditText3;

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(167, 99));

            // Type '=B2*10' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathWithErrorParams.UICellValueTextBoxEditText4;

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(326, 81));

            // Type '=B4/20' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathWithErrorParams.UICellValueTextBoxEditText5;

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(310, 120));

            // Type 'The last token of your formula must be a number, variable, or opening parentheses' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathWithErrorParams.UICellValueTextBoxEditText6;
        }
        
        /// <summary>
        /// BasicMathWithErrorAssertions - Use 'BasicMathWithErrorAssertionsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BasicMathWithErrorAssertions()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellValueWindowEdit = this.UIForm1Window.UICellValueWindowWindow.UICellValueWindowEdit;
            WinEdit uICellContentsBoxEdit = this.UIForm1Window.UIA1Window.UICellContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals '=B4/20'
            Assert.AreEqual(this.BasicMathWithErrorAssertionsExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);

            // Verify that the 'Text' property of 'cellValueWindow' text box equals '7.5'
            Assert.AreEqual(this.BasicMathWithErrorAssertionsExpectedValues.UICellValueWindowEditText, uICellValueWindowEdit.Text);

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'D3'
            Assert.AreEqual(this.BasicMathWithErrorAssertionsExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text);
        }
        
        /// <summary>
        /// BasicMathTest - Use 'BasicMathTestParams' to pass parameters into this method.
        /// </summary>
        public void BasicMathTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinClient uIEditCellClient = this.UIForm1Window.UISpreadsheetPanel1Window.UIEditCellClient;
            WinClient uICellValueClient = this.UIForm1Window.UIItemWindow.UICellValueClient;
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(35, 17));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(58, 7));

            // Type '2{Enter}' in 'Edit Cell' client
            Keyboard.SendKeys(uIEditCellClient, this.BasicMathTestParams.UIEditCellClientSendKeys, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(78, 40));

            // Type '2' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathTestParams.UICellValueTextBoxEditText;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.BasicMathTestParams.UICellValueTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(50, 63));

            // Type '3' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathTestParams.UICellValueTextBoxEditText1;

            // Type '{Enter}' in 'cellValueTextBox' text box
            Keyboard.SendKeys(uICellValueTextBoxEdit, this.BasicMathTestParams.UICellValueTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'Cell Value' client
            Mouse.Click(uICellValueClient, new Point(123, 40));

            // Type '=A1*A2' in 'cellValueTextBox' text box
            uICellValueTextBoxEdit.Text = this.BasicMathTestParams.UICellValueTextBoxEditText2;

            // Type '2{Enter}' in 'Edit Cell' client
            Keyboard.SendKeys(uIEditCellClient, this.BasicMathTestParams.UIEditCellClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertFormula - Use 'AssertFormulaExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFormula()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UIForm1Window.UIA1Window.UICellContentsBoxEdit;
            WinEdit uICellValueWindowEdit = this.UIForm1Window.UICellValueWindowWindow.UICellValueWindowEdit;
            WinEdit uICellValueTextBoxEdit = this.UIForm1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'B1'
            Assert.AreEqual(this.AssertFormulaExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'cellValueWindow' text box equals '6'
            Assert.AreEqual(this.AssertFormulaExpectedValues.UICellValueWindowEditText, uICellValueWindowEdit.Text);

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals '=A1*A2'
            Assert.AreEqual(this.AssertFormulaExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertCellNameB1 - Use 'AssertCellNameB1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellNameB1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UIForm1Window.UIA1Window.UICellContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'B1'
            Assert.AreEqual(this.AssertCellNameB1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertCellValue6 - Use 'AssertCellValue6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellValue6()
        {
            #region Variable Declarations
            WinEdit uICellValueWindowEdit = this.UIForm1Window.UICellValueWindowWindow.UICellValueWindowEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueWindow' text box equals '6'
            Assert.AreEqual(this.AssertCellValue6ExpectedValues.UICellValueWindowEditText, uICellValueWindowEdit.Text);
        }
        
        #region Properties
        public virtual BasicMathWithErrorParams BasicMathWithErrorParams
        {
            get
            {
                if ((this.mBasicMathWithErrorParams == null))
                {
                    this.mBasicMathWithErrorParams = new BasicMathWithErrorParams();
                }
                return this.mBasicMathWithErrorParams;
            }
        }
        
        public virtual BasicMathWithErrorAssertionsExpectedValues BasicMathWithErrorAssertionsExpectedValues
        {
            get
            {
                if ((this.mBasicMathWithErrorAssertionsExpectedValues == null))
                {
                    this.mBasicMathWithErrorAssertionsExpectedValues = new BasicMathWithErrorAssertionsExpectedValues();
                }
                return this.mBasicMathWithErrorAssertionsExpectedValues;
            }
        }
        
        public virtual BasicMathTestParams BasicMathTestParams
        {
            get
            {
                if ((this.mBasicMathTestParams == null))
                {
                    this.mBasicMathTestParams = new BasicMathTestParams();
                }
                return this.mBasicMathTestParams;
            }
        }
        
        public virtual AssertFormulaExpectedValues AssertFormulaExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaExpectedValues == null))
                {
                    this.mAssertFormulaExpectedValues = new AssertFormulaExpectedValues();
                }
                return this.mAssertFormulaExpectedValues;
            }
        }
        
        public virtual AssertCellNameB1ExpectedValues AssertCellNameB1ExpectedValues
        {
            get
            {
                if ((this.mAssertCellNameB1ExpectedValues == null))
                {
                    this.mAssertCellNameB1ExpectedValues = new AssertCellNameB1ExpectedValues();
                }
                return this.mAssertCellNameB1ExpectedValues;
            }
        }
        
        public virtual AssertCellValue6ExpectedValues AssertCellValue6ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValue6ExpectedValues == null))
                {
                    this.mAssertCellValue6ExpectedValues = new AssertCellValue6ExpectedValues();
                }
                return this.mAssertCellValue6ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        #endregion
        
        #region Fields
        private BasicMathWithErrorParams mBasicMathWithErrorParams;
        
        private BasicMathWithErrorAssertionsExpectedValues mBasicMathWithErrorAssertionsExpectedValues;
        
        private BasicMathTestParams mBasicMathTestParams;
        
        private AssertFormulaExpectedValues mAssertFormulaExpectedValues;
        
        private AssertCellNameB1ExpectedValues mAssertCellNameB1ExpectedValues;
        
        private AssertCellValue6ExpectedValues mAssertCellValue6ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIForm1Window mUIForm1Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicMathWithError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BasicMathWithErrorParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}{Down}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys = "{Enter}{Down}";
        
        /// <summary>
        /// Type '3' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText2 = "=A1+A2";
        
        /// <summary>
        /// Type '=B1*3' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText3 = "=B1*3";
        
        /// <summary>
        /// Type '=B2*10' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText4 = "=B2*10";
        
        /// <summary>
        /// Type '=B4/20' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText5 = "=B4/20";
        
        /// <summary>
        /// Type 'The last token of your formula must be a number, variable, or opening parentheses' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText6 = "The last token of your formula must be a number, variable, or opening parentheses" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicMathWithErrorAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BasicMathWithErrorAssertionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals '=B4/20'
        /// </summary>
        public string UICellValueTextBoxEditText = "=B4/20";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueWindow' text box equals '7.5'
        /// </summary>
        public string UICellValueWindowEditText = "7.5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'D3'
        /// </summary>
        public string UICellContentsBoxEditText = "D3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicMathTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BasicMathTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2{Enter}' in 'Edit Cell' client
        /// </summary>
        public string UIEditCellClientSendKeys = "2{Enter}";
        
        /// <summary>
        /// Type '2' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1*A2' in 'cellValueTextBox' text box
        /// </summary>
        public string UICellValueTextBoxEditText2 = "=A1*A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFormulaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'B1'
        /// </summary>
        public string UICellContentsBoxEditText = "B1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueWindow' text box equals '6'
        /// </summary>
        public string UICellValueWindowEditText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals '=A1*A2'
        /// </summary>
        public string UICellValueTextBoxEditText = "=A1*A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellNameB1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertCellNameB1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'B1'
        /// </summary>
        public string UICellContentsBoxEditText = "B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValue6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertCellValue6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueWindow' text box equals '6'
        /// </summary>
        public string UICellValueWindowEditText = "6";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UICellValueTextBoxWindow UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISolveWindow UISolveWindow
        {
            get
            {
                if ((this.mUISolveWindow == null))
                {
                    this.mUISolveWindow = new UISolveWindow(this);
                }
                return this.mUISolveWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UICellValueWindowWindow UICellValueWindowWindow
        {
            get
            {
                if ((this.mUICellValueWindowWindow == null))
                {
                    this.mUICellValueWindowWindow = new UICellValueWindowWindow(this);
                }
                return this.mUICellValueWindowWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICellValueTextBoxWindow mUICellValueTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISolveWindow mUISolveWindow;
        
        private UIA1Window mUIA1Window;
        
        private UICellValueWindowWindow mUICellValueWindowWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueTextBoxWindow : WinWindow
    {
        
        public UICellValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueTextBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UICellValueClient
        {
            get
            {
                if ((this.mUICellValueClient == null))
                {
                    this.mUICellValueClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICellValueClient.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICellValueClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISolveWindow : WinWindow
    {
        
        public UISolveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "solveButton";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UISolveButton
        {
            get
            {
                if ((this.mUISolveButton == null))
                {
                    this.mUISolveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISolveButton.SearchProperties[WinButton.PropertyNames.Name] = "Solve";
                    this.mUISolveButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISolveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISolveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueWindowWindow : WinWindow
    {
        
        public UICellValueWindowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueWindow";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueWindowEdit
        {
            get
            {
                if ((this.mUICellValueWindowEdit == null))
                {
                    this.mUICellValueWindowEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueWindowEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell Value";
                    this.mUICellValueWindowEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueWindowEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueWindowEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UIEditCellClient
        {
            get
            {
                if ((this.mUIEditCellClient == null))
                {
                    this.mUIEditCellClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIEditCellClient.SearchProperties[WinControl.PropertyNames.Name] = "Edit Cell";
                    this.mUIEditCellClient.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIEditCellClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIEditCellClient;
        #endregion
    }
}
